basePath: /api
definitions:
  api.ChangePasswordBody:
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    type: object
  api.ChangeUsernameBody:
    properties:
      newUsername:
        type: string
    type: object
  app.GlobalResponse:
    properties:
      message:
        type: string
    type: object
  application.Application:
    properties:
      created_at:
        type: string
      health:
        $ref: '#/definitions/application.Health'
      health_status:
        type: string
      id:
        type: integer
      last_synced_at:
        type: string
      name:
        type: string
      refresh_timer:
        description: Timer to check for Sync format of "3m50s"
        type: string
      source:
        $ref: '#/definitions/application.Source'
      updated_at:
        type: string
    type: object
  application.Health:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Healthy
    - Progressing
    - Degraded
    - Suspended
  application.Source:
    properties:
      path:
        type: string
      repoURL:
        type: string
      targetRevision:
        type: string
    type: object
  auth.AllUsers:
    properties:
      data:
        items:
          $ref: '#/definitions/auth.User'
        type: array
    type: object
  auth.User:
    properties:
      createdAt:
        type: string
      lastLoggedIn:
        type: string
      passwordHash:
        description: hash passwords
        type: string
      role:
        $ref: '#/definitions/auth.UserRole'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  auth.UserRole:
    enum:
    - admin
    - general
    type: string
    x-enum-varnames:
    - Admin
    - General
  core.AppList:
    properties:
      data:
        items:
          $ref: '#/definitions/core.AppStatus'
        type: array
    type: object
  core.AppStatus:
    properties:
      created_at:
        type: string
      health:
        type: string
      id:
        type: integer
      last_synced_at:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  repo.ListData:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  repo.PrivateRepoDetails:
    properties:
      password:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  repo.RemovePayload:
    properties:
      repo:
        type: string
    type: object
externalDocs:
  description: Meltcd Docs
  url: https://cd.meltred.tech/docs
host: localhost:11771
info:
  contact: {}
  description: Argo-cd like GitDevOps Continuous Development platform for docker swarm.
  license:
    name: Apache 2.0
    url: https://github.com/meltred/meltcd/blob/main/LICENSE
  title: Meltcd API
  version: "0.6"
paths:
  /:
    get:
      produces:
      - text/plain
      responses: {}
      summary: Check server status
      tags:
      - General
  /apps:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.AppList'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Get a list all applications created
      tags:
      - Apps
    post:
      consumes:
      - application/json
      parameters:
      - description: Application body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.Application'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Create a new application
      tags:
      - Apps
    put:
      consumes:
      - application/json
      parameters:
      - description: Application body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.Application'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Update an application
      tags:
      - Apps
  /apps/{app_name}:
    delete:
      parameters:
      - description: Application name
        in: path
        name: app_name
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Remove an application
      tags:
      - Apps
    get:
      parameters:
      - description: Application name
        in: path
        name: app_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application.Application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Get details of an application
      tags:
      - Apps
  /apps/{app_name}/recreate:
    post:
      parameters:
      - description: Application name
        in: path
        name: app_name
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Recreate application
      tags:
      - Apps
  /apps/{app_name}/refresh:
    post:
      parameters:
      - description: Application name
        in: path
        name: app_name
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Refresh/Synchronize an application
      tags:
      - Apps
  /login:
    post:
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BasicAuth: []
      summary: Login user
      tags:
      - General
  /repo:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Repository url
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/repo.RemovePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Remove a repository
      tags:
      - Repo
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.ListData'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Get a list all repositories
      tags:
      - Repo
    post:
      consumes:
      - application/json
      parameters:
      - description: Repository details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/repo.PrivateRepoDetails'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Add a new repository
      tags:
      - Repo
    put:
      consumes:
      - application/json
      parameters:
      - description: Repository details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/repo.PrivateRepoDetails'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.GlobalResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.GlobalResponse'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Update a repository
      tags:
      - Repo
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AllUsers'
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Get all the users
      tags:
      - Users
  /users/{username}/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Change password body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ChangePasswordBody'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Change password of user
      tags:
      - Users
  /users/{username}/username:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Change username body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ChangeUsernameBody'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Change username of user
      tags:
      - Users
  /users/current:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
        cookies: []
      summary: Get username of current logged-in user
      tags:
      - Users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
